package msg

import (
	"encoding/binary"
	"reflect"
	"unsafe"
)

// Temp Implement
// Should be generated by protobuf

type Message struct {
	Length      uint32
	Target      string
	TargetGroup string
	Type        uint8
	Body        []byte
	Checksum    uint32
}

func ToBytes(i interface{}) []byte {
	var buf = make([]byte, unsafe.Sizeof(i))
	t := reflect.TypeOf(i).Kind()
	switch t {
	case reflect.Uint8:
		buf[0] = i.(uint8)
 	case reflect.Uint16:
		binary.BigEndian.PutUint16(buf, i.(uint16))
	case reflect.Uint32:
		binary.BigEndian.PutUint32(buf, i.(uint32))
	case reflect.Uint64:
		binary.BigEndian.PutUint64(buf, i.(uint64))
	}
	return buf
}

func FromByte(buf []byte) int64 {
	return int64(binary.BigEndian.Uint64(buf))
}

func (m *Message) Serialize() []byte {
	buf := make([]byte, 0)
	buf = append(buf, ToBytes(m.Length)...)
	buf = append(buf, []byte(m.Target)...)
	buf = append(buf, []byte(m.TargetGroup)...)
	buf = append(buf, ToBytes(m.Type)...)
	buf = append(buf, m.Body...)
	buf = append(buf, ToBytes(m.Checksum)...)
	return buf
}

func (m *Message) Deserialize(data []byte) (*Message, error) {
	m.Length = uint32(len(data))
	m.Target = ""
	m.TargetGroup = ""
	m.Type = 0
	m.Body = data
	m.Checksum = 0
	return m, nil
}
